//! Playground for renderer implementation.
#[cfg(test)]
mod tests {
    use crate::{
        compile::parser::tree::{
            Arguments, Base, Call, Expression, Identifier, Key, Literal, Output, Tree, Variable,
        },
        region::Region,
    };
    use serde_json::Value;
    use std::fmt::{Error, Write};

    #[test]
    fn test_render() -> Result<(), Error> {
        let mut buffer = String::new();

        // source is the source string, tokens is the AST representation of source.
        let (source, tokens) = get_test_data();
        let mut iterator = tokens.iter();

        while let Some(next) = iterator.next() {
            match next {
                Tree::Raw(region) => write!(buffer, "{}", source[*region].to_string())?,
                _ => continue
                // Token::Output(_) => todo!(),
                // Token::Include(_) => todo!(),
                // Token::IfElse(_) => todo!(),
                // Token::ForLoop(_) => todo!(),
            };
        }
        println!("{buffer}");
        Ok(())
    }

    /// Return a tuple of test data.
    fn get_test_data() -> (String, Vec<Tree>) {
        // Output generated by [.test_parse_full_expression()] in Parser.rs
        let source = "hello (( name | prepend 1: \"hello, \" | append \"!\" | upper ))".to_string();
        let tokens = vec![
            Tree::Raw(Region { begin: 0, end: 6 }),
            Tree::Output(Output {
                expression: Expression::Call(Call {
                    name: Identifier {
                        region: Region { begin: 52, end: 57 },
                    },
                    arguments: None,
                    receiver: Box::new(Expression::Call(Call {
                        name: Identifier {
                            region: Region { begin: 39, end: 45 },
                        },
                        arguments: Some(Arguments {
                            values: vec![(
                                None,
                                Base::Literal(Literal {
                                    value: Value::String("!".to_string()),
                                    region: Region { begin: 46, end: 49 },
                                }),
                            )],
                            region: Region { begin: 46, end: 49 },
                        }),
                        receiver: Box::new(Expression::Call(Call {
                            name: Identifier {
                                region: Region { begin: 16, end: 23 },
                            },
                            arguments: Some(Arguments {
                                values: vec![(
                                    Some(Region { begin: 24, end: 25 }),
                                    Base::Literal(Literal {
                                        value: Value::String("hello, ".to_string()),
                                        region: Region { begin: 27, end: 36 },
                                    }),
                                )],
                                region: Region { begin: 24, end: 36 },
                            }),
                            receiver: Box::new(Expression::Base(Base::Variable(Variable {
                                path: vec![Key {
                                    identifier: Identifier {
                                        region: Region { begin: 9, end: 13 },
                                    },
                                }],
                            }))),
                            region: Region { begin: 9, end: 36 },
                        })),
                        region: Region { begin: 9, end: 49 },
                    })),
                    region: Region { begin: 9, end: 57 },
                }),
                region: Region { begin: 6, end: 60 },
            }),
        ];

        (source, tokens)
    }
}
